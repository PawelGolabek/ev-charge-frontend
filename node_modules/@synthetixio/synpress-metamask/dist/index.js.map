{"version":3,"sources":["../src/pages/OnboardingPage/actions/importWallet.ts","../src/utils/waitFor.ts","../src/utils/clickLocatorIfCondition.ts","../src/utils/selectors/createDataTestSelector.ts","../src/pages/HomePage/selectors/settings.ts","../src/pages/HomePage/selectors/index.ts","../src/pages/HomePage/actions/popups/closePopover.ts","../src/pages/HomePage/actions/popups/closeRecoveryPhraseReminder.ts","../src/pages/HomePage/actions/popups/closeNewNetworkInfoPopover.ts","../src/pages/HomePage/actions/popups/closeNetworkAddedPopover.ts","../src/pages/HomePage/actions/lock.ts","../src/pages/HomePage/actions/importWalletFromPrivateKey.ts","../src/utils/allTextContents.ts","../src/pages/HomePage/actions/switchAccount.ts","../src/utils/toggle.ts","../src/pages/HomePage/actions/settings.ts","../src/pages/HomePage/actions/switchNetwork.ts","../src/pages/HomePage/actions/addNetwork.ts","../src/pages/HomePage/actions/toggleShowTestNetworks.ts","../src/pages/HomePage/actions/addNewAccount.ts","../src/pages/HomePage/actions/transactionDetails.ts","../src/pages/OnboardingPage/selectors/analyticsPage.ts","../src/pages/OnboardingPage/selectors/getStartedPage.ts","../src/pages/OnboardingPage/selectors/pinExtensionPage.ts","../src/pages/OnboardingPage/selectors/secretRecoveryPhrasePage.ts","../src/pages/OnboardingPage/selectors/walletCreationSuccessPage.ts","../src/pages/OnboardingPage/selectors/index.ts","../src/pages/OnboardingPage/actions/helpers/confirmSecretRecoveryPhrase.ts","../src/pages/OnboardingPage/actions/helpers/createPassword.ts","../src/pages/OnboardingPage/page.ts","../src/pages/CrashPage/selectors/index.ts","../src/pages/CrashPage/page.ts","../src/selectors/loading/index.ts","../src/utils/waitForSpinnerToVanish.ts","../src/pages/LockPage/selectors/index.ts","../src/pages/LockPage/actions/unlock.ts","../src/pages/LockPage/page.ts","../src/pages/HomePage/page.ts","../src/utils/getNotificationPageAndWaitForLoad.ts","../src/pages/NotificationPage/selectors/actionFooter.ts","../src/pages/NotificationPage/selectors/connectPage.ts","../src/pages/NotificationPage/selectors/networkPage.ts","../src/pages/NotificationPage/selectors/permissionPage.ts","../src/pages/NotificationPage/selectors/signaturePage.ts","../src/pages/NotificationPage/selectors/transactionPage.ts","../src/pages/NotificationPage/selectors/index.ts","../src/pages/NotificationPage/actions/connectToDapp.ts","../src/pages/NotificationPage/actions/signSimpleMessage.ts","../src/pages/NotificationPage/actions/signStructuredMessage.ts","../src/pages/NotificationPage/actions/transaction.ts","../src/pages/NotificationPage/actions/approvePermission.ts","../src/pages/NotificationPage/actions/network.ts","../src/pages/NotificationPage/page.ts","../src/metamask.ts","../src/fixture-actions/unlockForFixture.ts"],"names":["SettingsSidebarMenus","classes","resetAccount","advanced","z","network","selectors_default","StepSelectors","addNetwork","switchNetwork","signMessage","rejectMessage","gasSetting"],"mappings":"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","sourcesContent":["import assert from 'node:assert'\nimport type { Page } from '@playwright/test'\nimport { closePopover } from '../../HomePage/actions'\nimport HomePageSelectors from '../../HomePage/selectors'\nimport Selectors from '../selectors'\nimport { confirmSecretRecoveryPhrase, createPassword } from './helpers'\n\nexport async function importWallet(page: Page, seedPhrase: string, password: string) {\n  await page.locator(Selectors.GetStartedPageSelectors.termsOfServiceCheckbox).click()\n  await page.locator(Selectors.GetStartedPageSelectors.importWallet).click()\n\n  await page.locator(Selectors.AnalyticsPageSelectors.optOut).click()\n\n  // Secret Recovery Phrase Page\n  await confirmSecretRecoveryPhrase(page, seedPhrase)\n  await createPassword(page, password)\n\n  await page.locator(Selectors.WalletCreationSuccessPageSelectors.confirmButton).click()\n\n  await page.locator(Selectors.PinExtensionPageSelectors.nextButton).click()\n  await page.locator(Selectors.PinExtensionPageSelectors.confirmButton).click()\n\n  await closePopover(page)\n\n  await verifyImportedWallet(page)\n}\n\n// Checks if the wallet was imported successfully.\n// On rare occasions, the MetaMask hangs during the onboarding process.\nasync function verifyImportedWallet(page: Page) {\n  const accountAddress = await page.locator(HomePageSelectors.copyAccountAddressButton).textContent()\n\n  assert.strictEqual(\n    accountAddress?.startsWith('0x'),\n    true,\n    new Error(\n      [\n        `Incorrect state after importing the seed phrase. Account address is expected to start with \"0x\", but got \"${accountAddress}\" instead.`,\n        'Note: Try to re-run the cache creation. This is a known but rare error where MetaMask hangs during the onboarding process. If it persists, please file an issue on GitHub.'\n      ].join('\\n')\n    )\n  )\n}\n","// Inlining the sleep function here cause this is one of the few places in the entire codebase where sleep should be used!\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\nconst timeouts = [0, 20, 50, 100, 100, 500] as const\n\n// TODO: Box this function.\n// This functions mimics the one found in Playwright with a few small differences.\n// Custom implementation is needed because Playwright lists errors in the report even if they are caught.\nexport async function waitFor(action: () => Promise<boolean>, timeout: number, shouldThrow = true) {\n  let timeoutsSum = 0\n  let timeoutIndex = 0\n\n  let reachedTimeout = false\n\n  while (!reachedTimeout) {\n    let nextTimeout = timeouts.at(Math.min(timeoutIndex++, timeouts.length - 1)) as number\n\n    if (timeoutsSum + nextTimeout > timeout) {\n      nextTimeout = timeout - timeoutsSum\n      reachedTimeout = true\n    } else {\n      timeoutsSum += nextTimeout\n    }\n\n    await sleep(nextTimeout)\n\n    const result = await action()\n    if (result) {\n      return result\n    }\n  }\n\n  if (shouldThrow) {\n    throw new Error(`Timeout ${timeout}ms exceeded.`)\n  }\n\n  return false\n}\n","import type { Locator } from '@playwright/test'\nimport { waitFor } from './waitFor'\n\n// TODO: Extract & make configurable\nexport async function clickLocatorIfCondition(locator: Locator, condition: () => Promise<boolean>, timeout = 3_000) {\n  const shouldClick = await waitFor(condition, timeout, false)\n  if (shouldClick) {\n    await locator.click()\n  }\n}\n","export const createDataTestSelector = (dataTestId: string) => {\n  if (dataTestId.includes(' ')) {\n    throw new Error('[CreateDataTestSelector] dataTestId cannot contain spaces')\n  }\n\n  return `[data-testid=\"${dataTestId}\"]`\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport enum SettingsSidebarMenus {\n  General = 1,\n  Advanced = 2\n\n  /// ---- Unused Selectors ----\n  // Contacts = 3,\n  // SecurityAndPrivacy = 4,\n  // Alerts = 5,\n  // Networks = 6,\n  // Experimental = 7,\n  // About = 8\n}\nconst sidebarMenu = (menu: SettingsSidebarMenus) =>\n  `.settings-page__content__tabs .tab-bar__tab.pointer:nth-of-type(${menu})`\n\nconst resetAccount = {\n  button: `${createDataTestSelector('advanced-setting-reset-account')} button`,\n  confirmButton: '.modal .modal-container__footer button.btn-danger-primary'\n}\n\nconst advanced = {\n  // locator(showTestNetworksToggle).nth(0) -> Show conversion on test networks\n  // locator(showTestNetworksToggle).nth(1) -> Show test networks\n  resetAccount,\n  showTestNetworksToggle: `${createDataTestSelector('advanced-setting-show-testnet-conversion')} .toggle-button`,\n  dismissSecretRecoveryPhraseReminderToggle: '.settings-page__content-row:nth-of-type(11) .toggle-button'\n}\n\nconst newNetworkFormContainer = '.networks-tab__add-network-form'\nconst newNetworkForm = {\n  networkNameInput: `${newNetworkFormContainer} .form-field:nth-child(1) input`,\n  rpcUrlInput: `${newNetworkFormContainer} .form-field:nth-child(2) input`,\n  rpcUrlError: `${newNetworkFormContainer} .form-field:nth-child(2) .form-field__error`,\n  chainIdInput: `${newNetworkFormContainer} .form-field:nth-child(3) input`,\n  chainIdError: `${newNetworkFormContainer} .form-field:nth-child(3) .form-field__error`,\n  symbolInput: `${createDataTestSelector('network-form-ticker')} input`,\n  symbolError: createDataTestSelector('network-form-ticker-warning'),\n  blockExplorerUrlInput: `${newNetworkFormContainer} .form-field:last-child input`,\n  saveButton: `${newNetworkFormContainer} .networks-tab__add-network-form-footer button.btn-primary`\n}\n\nconst networks = {\n  addNetworkManuallyButton: `${createDataTestSelector('add-network-manually')}`,\n  newNetworkForm\n}\n\nexport default {\n  SettingsSidebarMenus,\n  sidebarMenu,\n  advanced,\n  networks\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\nimport settings from './settings'\n\nconst accountMenuContainer = '.multichain-account-menu-popover'\n\nconst addNewAccountMenu = {\n  accountNameInput: `${accountMenuContainer} input`,\n  createButton: `${accountMenuContainer} button.mm-button-primary`\n}\n\nconst importAccountMenu = {\n  privateKeyInput: `${accountMenuContainer} input#private-key-box`,\n  importButton: `${accountMenuContainer} ${createDataTestSelector('import-account-confirm-button')}`,\n  error: `${accountMenuContainer} p.mm-form-text-field__help-text`\n}\n\nconst addAccountMenu = {\n  addAccountButton: `${accountMenuContainer} ${createDataTestSelector(\n    'multichain-account-menu-popover-action-button'\n  )}`,\n  addNewAccountButton: `${accountMenuContainer} ${createDataTestSelector(\n    'multichain-account-menu-popover-add-account'\n  )}`,\n  importAccountButton: `${accountMenuContainer} div.mm-box.mm-box--padding-4:nth-child(2) > div.mm-box:nth-child(2) > button`,\n  addNewAccountMenu,\n  importAccountMenu\n}\n\nconst accountMenu = {\n  accountButton: createDataTestSelector('account-menu-icon'),\n  accountNames: `${accountMenuContainer} .multichain-account-menu-popover__list .multichain-account-list-item__account-name__button`,\n  addAccountMenu\n}\n\nconst threeDotsMenu = {\n  threeDotsButton: createDataTestSelector('account-options-menu-button'),\n  settingsButton: createDataTestSelector('global-menu-settings'),\n  lockButton: createDataTestSelector('global-menu-lock')\n}\n\nconst popoverContainer = '.popover-container'\nconst popover = {\n  closeButton: `${popoverContainer} ${createDataTestSelector('popover-close')}`\n}\n\nconst networkAddedPopover = {\n  switchToNetworkButton: '.home__new-network-added button.btn-primary',\n  dismissButton: '.home__new-network-added button.btn-secondary'\n}\n\nconst newNetworkInfoPopover = {\n  gotItButton: '.new-network-info__wrapper button.btn-primary'\n}\n\nconst recoveryPhraseReminder = {\n  gotItButton: '.recovery-phrase-reminder button.btn-primary'\n}\n\nconst networkDropdownContainer = '.multichain-network-list-menu-content-wrapper'\nconst networkDropdown = {\n  dropdownButton: createDataTestSelector('network-display'),\n  closeDropdownButton: `${networkDropdownContainer} > section > div:nth-child(1) button`,\n  networksList: `${networkDropdownContainer} .multichain-network-list-menu`,\n  networks: `${networkDropdownContainer} .multichain-network-list-item p`,\n  showTestNetworksToggle: `${networkDropdownContainer} > section > div > label.toggle-button`,\n  addNetworkButton: `${networkDropdownContainer} div.mm-box.mm-box--padding-4 > button`,\n  toggleOff: `${networkDropdownContainer} label.toggle-button.toggle-button--off`,\n  toggleOn: `${networkDropdownContainer} label.toggle-button.toggle-button--on`\n}\n\nconst tabContainer = '.tabs__content'\nconst activityTab = {\n  activityTabButton: `${createDataTestSelector('home__activity-tab')}`,\n  transactionsList: `${tabContainer} .transaction-list__transactions`,\n  pendingQueuedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--queued`,\n  pendingUnapprovedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--unapproved`,\n  pendingApprovedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--pending`,\n  completedTransactions: `${tabContainer} .transaction-list__completed-transactions .transaction-list-item`\n\n  /// ---- Unused Selectors ----\n  // pendingTransactionsList: `${tabContainer} .transaction-list__pending-transactions`,\n  // pendingTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item`,\n  // completedTransactionsList: `${tabContainer} .transaction-list__completed-transactions`,\n}\n\nexport default {\n  logo: `button${createDataTestSelector('app-header-logo')}`,\n  copyAccountAddressButton: createDataTestSelector('address-copy-button-text'),\n  currentNetwork: `${createDataTestSelector('network-display')} span:nth-of-type(1)`,\n  threeDotsMenu,\n  settings,\n  activityTab,\n  networkDropdown,\n  accountMenu,\n  recoveryPhraseReminder,\n  popover,\n  networkAddedPopover,\n  newNetworkInfoPopover\n}\n","import type { Page } from '@playwright/test'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\nimport Selectors from '../../selectors'\n\n// Closes the popover with news, rainbows, unicorns, and other stuff.\nexport async function closePopover(page: Page) {\n  // We're using `first()` here just in case there are multiple popovers, which happens sometimes.\n  const closeButtonLocator = page.locator(Selectors.popover.closeButton).first()\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(closeButtonLocator, () => closeButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\nimport Selectors from '../../selectors'\n\nexport async function closeRecoveryPhraseReminder(page: Page) {\n  const closeButtonLocator = page.locator(Selectors.recoveryPhraseReminder.gotItButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(closeButtonLocator, () => closeButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\nimport Selectors from '../../selectors'\n\nexport async function closeNewNetworkInfoPopover(page: Page) {\n  const gotItButtonLocator = page.locator(Selectors.newNetworkInfoPopover.gotItButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(gotItButtonLocator, () => gotItButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\nimport Selectors from '../../selectors'\n\n// Note: The \"Dismiss\" button does NOTHING and the network is ALWAYS automatically switched.\nexport async function closeNetworkAddedPopover(page: Page) {\n  const switchNetworkButtonLocator = page.locator(Selectors.networkAddedPopover.switchToNetworkButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(switchNetworkButtonLocator, () => switchNetworkButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\n\nexport async function lock(page: Page) {\n  await page.locator(Selectors.threeDotsMenu.threeDotsButton).click()\n  await page.locator(Selectors.threeDotsMenu.lockButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport { waitFor } from '../../../utils/waitFor'\nimport Selectors from '../selectors'\n\nexport async function importWalletFromPrivateKey(page: Page, privateKey: string) {\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addAccountButton).click()\n  await page.locator(Selectors.accountMenu.addAccountMenu.importAccountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.privateKeyInput).fill(privateKey)\n\n  const importButton = page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.importButton)\n  await importButton.click()\n\n  // TODO: Extract & make configurable\n  const isImportButtonHidden = await waitFor(() => importButton.isHidden(), 1_000, false)\n\n  if (!isImportButtonHidden) {\n    const errorText = await page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.error).textContent({\n      timeout: 1_000 // TODO: Extract & make configurable\n    })\n\n    throw new Error(`[ImportWalletFromPrivateKey] Importing failed due to error: ${errorText}`)\n  }\n}\n","import type { Locator } from '@playwright/test'\nimport { z } from 'zod'\n\n// Custom implementation of `locator.allTextContents()` that is not utilizing `.map` which is not accessible under MetaMask's scuttling mode.\nexport async function allTextContents(locators: Locator[]) {\n  const names = await Promise.all(locators.map((locator) => locator.textContent()))\n\n  // We're making sure that the return type is `string[]` same as `locator.allTextContents()`.\n  return names.map((name) => z.string().parse(name))\n}\n","import type { Page } from '@playwright/test'\nimport { allTextContents } from '../../../utils/allTextContents'\nimport Selectors from '../selectors'\n\nexport async function switchAccount(page: Page, accountName: string) {\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  const accountNamesLocators = await page.locator(Selectors.accountMenu.accountNames).all()\n\n  const accountNames = await allTextContents(accountNamesLocators)\n\n  const seekedAccountNames = accountNames.filter((name) => name.toLocaleLowerCase() === accountName.toLocaleLowerCase())\n\n  if (seekedAccountNames.length === 0) {\n    throw new Error(`[SwitchAccount] Account with name ${accountName} not found`)\n  }\n\n  // biome-ignore lint/style/noNonNullAssertion: this non-null assertion is intentional\n  const accountIndex = accountNames.indexOf(seekedAccountNames[0]!) // TODO: handle the undefined here better\n\n  // biome-ignore lint/style/noNonNullAssertion: this non-null assertion is intentional\n  await accountNamesLocators[accountIndex]!.click() // TODO: handle the undefined here better\n}\n","import type { Locator } from '@playwright/test'\nimport { waitFor } from './waitFor'\n\nexport async function toggle(toggleLocator: Locator) {\n  // TODO: Extract timeout\n  const classes = await toggleLocator.getAttribute('class', { timeout: 3_000 })\n\n  if (!classes) {\n    throw new Error('[ToggleShowTestNetworks] Toggle class returned null')\n  }\n\n  const isOn = classes.includes('toggle-button--on')\n\n  await toggleLocator.click()\n\n  const waitForAction = async () => {\n    const classes = await toggleLocator.getAttribute('class')\n\n    if (!classes) {\n      throw new Error('[ToggleShowTestNetworks] Toggle class returned null inside waitFor')\n    }\n\n    if (isOn) {\n      return classes.includes('toggle-button--off')\n    }\n\n    return classes.includes('toggle-button--on')\n  }\n\n  // TODO: Extract timeout\n  await waitFor(waitForAction, 3_000, true)\n}\n","import type { Page } from '@playwright/test'\nimport { toggle } from '../../../utils/toggle'\nimport Selectors from '../selectors'\nimport type { SettingsSidebarMenus } from '../selectors/settings'\n\nasync function openSettings(page: Page) {\n  await page.locator(Selectors.threeDotsMenu.threeDotsButton).click()\n  await page.locator(Selectors.threeDotsMenu.settingsButton).click()\n}\n\nasync function openSidebarMenu(page: Page, menu: SettingsSidebarMenus) {\n  await page.locator(Selectors.settings.sidebarMenu(menu)).click()\n}\n\nasync function resetAccount(page: Page) {\n  const buttonSelector = `[data-testid=\"advanced-setting-reset-account\"] button`\n  const confirmButtonSelector = '.modal .modal-container__footer button.btn-danger-primary'\n\n  await page.locator(buttonSelector).click()\n  await page.locator(confirmButtonSelector).click()\n}\n\nasync function toggleDismissSecretRecoveryPhraseReminder(page: Page) {\n  const toggleLocator = page.locator(Selectors.settings.advanced.dismissSecretRecoveryPhraseReminderToggle)\n  await toggle(toggleLocator)\n}\n\nconst advanced = {\n  resetAccount,\n  toggleDismissSecretRecoveryPhraseReminder\n}\n\nexport const settings = {\n  openSettings,\n  openSidebarMenu,\n  advanced\n}\n","import type { Page } from '@playwright/test'\nimport { allTextContents } from '../../../utils/allTextContents'\nimport Selectors from '../selectors'\nimport { closeRecoveryPhraseReminder } from './popups'\n\nasync function openTestnetSection(page: Page) {\n  const toggleButtonLocator = page.locator(Selectors.networkDropdown.showTestNetworksToggle)\n  const classes = await toggleButtonLocator.getAttribute('class')\n  if (classes?.includes('toggle-button--off')) {\n    await toggleButtonLocator.click()\n    await page.locator(Selectors.networkDropdown.toggleOn).isChecked()\n  }\n}\n\nexport async function switchNetwork(page: Page, networkName: string, includeTestNetworks: boolean) {\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n\n  if (includeTestNetworks) {\n    await openTestnetSection(page)\n  }\n\n  const networkLocators = await page.locator(Selectors.networkDropdown.networks).all()\n  const networkNames = await allTextContents(networkLocators)\n\n  const seekedNetworkNameIndex = networkNames.findIndex(\n    (name) => name.toLocaleLowerCase() === networkName.toLocaleLowerCase()\n  )\n\n  const seekedNetworkLocator = seekedNetworkNameIndex >= 0 && networkLocators[seekedNetworkNameIndex]\n\n  if (!seekedNetworkLocator) {\n    throw new Error(`[SwitchNetwork] Network with name ${networkName} not found`)\n  }\n\n  await seekedNetworkLocator.click()\n\n  // TODO: This is not really needed if we do `metamask.toggleDismissSecretRecoveryPhraseReminder()` by default. Figure this out!\n  await closeRecoveryPhraseReminder(page)\n}\n","import type { Page } from '@playwright/test'\nimport { z } from 'zod'\nimport { waitFor } from '../../../utils/waitFor'\nimport Selectors from '../selectors'\nimport { closeNetworkAddedPopover, closeNewNetworkInfoPopover } from './popups'\n\nconst Network = z.object({\n  name: z.string(),\n  rpcUrl: z.string(),\n  chainId: z.number(),\n  symbol: z.string(),\n  blockExplorerUrl: z.string().optional()\n})\n\nexport type Network = z.infer<typeof Network>\n\nexport async function addNetwork(page: Page, network: Network) {\n  const { name, rpcUrl, chainId, symbol, blockExplorerUrl } = Network.parse(network)\n\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n  await page.locator(Selectors.networkDropdown.addNetworkButton).click()\n\n  await page.locator(Selectors.settings.networks.addNetworkManuallyButton).click()\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.networkNameInput).fill(name)\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.rpcUrlInput).fill(rpcUrl)\n\n  // We have to wait for the RPC URL error to appear.\n  const rpcUrlErrorLocator = page.locator(Selectors.settings.networks.newNetworkForm.rpcUrlError)\n  if (await waitFor(() => rpcUrlErrorLocator.isVisible(), 1_000, false)) {\n    const rpcUrlErrorText = await rpcUrlErrorLocator.textContent({\n      timeout: 1_000\n    })\n    throw new Error(`[AddNetwork] RPC URL error: ${rpcUrlErrorText}`)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.chainIdInput).fill(chainId.toString())\n\n  // We have to wait for the Chain ID error to appear.\n  const chainIdErrorLocator = page.locator(Selectors.settings.networks.newNetworkForm.chainIdError)\n  if (await waitFor(() => chainIdErrorLocator.isVisible(), 1_000, false)) {\n    const chainIdErrorText = await chainIdErrorLocator.textContent({\n      timeout: 1_000\n    })\n    throw new Error(`[AddNetwork] Chain ID error: ${chainIdErrorText}`)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.symbolInput).fill(symbol)\n\n  await waitFor(\n    async () => page.locator(Selectors.settings.networks.newNetworkForm.symbolError).isVisible(),\n    1_000,\n    false\n  )\n\n  if (blockExplorerUrl) {\n    await page.locator(Selectors.settings.networks.newNetworkForm.blockExplorerUrlInput).fill(blockExplorerUrl)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.saveButton).click()\n\n  await closeNetworkAddedPopover(page)\n\n  await closeNewNetworkInfoPopover(page)\n}\n","import type { Page } from '@playwright/test'\nimport { toggle } from '../../../utils/toggle'\nimport Selectors from '../selectors'\n\n// Toggling this through the network dropdown instead of the settings page is a better approach.\n// This is in most cases the faster approach, but it's also more reliable.\nexport async function toggleShowTestNetworks(page: Page) {\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n\n  await toggle(page.locator(Selectors.networkDropdown.showTestNetworksToggle))\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\n\nexport async function addNewAccount(page: Page, accountName: string) {\n  // TODO: Use zod to validate this.\n  if (accountName.length === 0) {\n    throw new Error('[AddNewAccount] Account name cannot be an empty string')\n  }\n\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addAccountButton).click()\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountMenu.accountNameInput).fill(accountName)\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountMenu.createButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport { waitFor } from '../../../utils/waitFor'\nimport Selectors from '../selectors'\n\nconst openTransactionDetails = async (page: Page, txIndex: number) => {\n  await page.locator(Selectors.activityTab.activityTabButton).click()\n\n  const visibleTxs = await page.locator(Selectors.activityTab.completedTransactions).count()\n\n  if (txIndex >= visibleTxs) {\n    throw new Error(\n      `[OpenTransactionDetails] Transaction with index ${txIndex} is not visible. There are only ${visibleTxs} transactions visible.`\n    )\n  }\n\n  await page.locator(Selectors.activityTab.completedTransactions).nth(txIndex).click()\n\n  // TODO: Extract timeout.\n  await waitFor(() => page.locator(Selectors.popover.closeButton).isVisible(), 3_000)\n}\n\nconst closeTransactionDetails = async (page: Page) => {\n  await page.locator(Selectors.popover.closeButton).click()\n}\n\nexport const transactionDetails = {\n  open: openTransactionDetails,\n  close: closeTransactionDetails\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  optIn: createDataTestSelector('metametrics-i-agree'),\n  optOut: createDataTestSelector('metametrics-no-thanks')\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  termsOfServiceCheckbox: createDataTestSelector('onboarding-terms-checkbox'),\n  createNewWallet: createDataTestSelector('onboarding-create-wallet'),\n  importWallet: createDataTestSelector('onboarding-import-wallet')\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  nextButton: createDataTestSelector('pin-extension-next'),\n  confirmButton: createDataTestSelector('pin-extension-done')\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nconst recoveryStep = {\n  selectNumberOfWordsDropdown: '.import-srp__number-of-words-dropdown > .dropdown__select',\n  selectNumberOfWordsOption: (option: number | string) => `${option}`,\n  secretRecoveryPhraseWord: (index: number) => createDataTestSelector(`import-srp__srp-word-${index}`),\n  confirmSecretRecoveryPhraseButton: createDataTestSelector('import-srp-confirm'),\n  error: '.mm-banner-alert.import-srp__srp-error div'\n}\n\nconst passwordStep = {\n  passwordInput: createDataTestSelector('create-password-new'),\n  confirmPasswordInput: createDataTestSelector('create-password-confirm'),\n  acceptTermsCheckbox: createDataTestSelector('create-password-terms'),\n  importWalletButton: createDataTestSelector('create-password-import'),\n  error: `${createDataTestSelector('create-password-new')} + h6 > span > span`\n}\n\nexport default {\n  recoveryStep,\n  passwordStep\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  confirmButton: createDataTestSelector('onboarding-complete-done')\n}\n","import AnalyticsPageSelectors from './analyticsPage'\nimport GetStartedPageSelectors from './getStartedPage'\nimport PinExtensionPageSelectors from './pinExtensionPage'\nimport SecretRecoveryPhrasePageSelectors from './secretRecoveryPhrasePage'\nimport WalletCreationSuccessPageSelectors from './walletCreationSuccessPage'\n\n// biome-ignore format: empty lines should be preserved\nexport default {\n  // Initial Welcome Page\n  GetStartedPageSelectors,\n\n  // 2nd Page\n  AnalyticsPageSelectors,\n\n  // 3rd Page with two steps:\n  // - Input Secret Recovery Phrase\n  // - Create Password\n  SecretRecoveryPhrasePageSelectors,\n\n  // 4th Page\n  WalletCreationSuccessPageSelectors,\n\n  // 5th Page\n  PinExtensionPageSelectors\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../selectors'\n\nconst StepSelectors = Selectors.SecretRecoveryPhrasePageSelectors.recoveryStep\n\nexport async function confirmSecretRecoveryPhrase(page: Page, seedPhrase: string) {\n  const seedPhraseWords = seedPhrase.split(' ')\n  const seedPhraseLength = seedPhraseWords.length\n\n  // TODO: This should be validated!\n  await page\n    .locator(StepSelectors.selectNumberOfWordsDropdown)\n    .selectOption(StepSelectors.selectNumberOfWordsOption(seedPhraseLength))\n\n  for (const [index, word] of seedPhraseWords.entries()) {\n    await page.locator(StepSelectors.secretRecoveryPhraseWord(index)).fill(word)\n  }\n\n  const confirmSRPButton = page.locator(StepSelectors.confirmSecretRecoveryPhraseButton)\n\n  if (await confirmSRPButton.isDisabled()) {\n    const errorText = await page.locator(StepSelectors.error).textContent({\n      timeout: 1000\n    })\n\n    throw new Error(`[ConfirmSecretRecoveryPhrase] Invalid seed phrase. Error from MetaMask: ${errorText}`)\n  }\n\n  await confirmSRPButton.click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../selectors'\n\nconst StepSelectors = Selectors.SecretRecoveryPhrasePageSelectors.passwordStep\n\nexport async function createPassword(page: Page, password: string) {\n  await page.locator(StepSelectors.passwordInput).fill(password)\n  await page.locator(StepSelectors.confirmPasswordInput).fill(password)\n\n  // Using `locator.click()` instead of `locator.check()` as a workaround due to dynamically appearing elements.\n  await page.locator(StepSelectors.acceptTermsCheckbox).click()\n\n  const importWalletButton = page.locator(StepSelectors.importWalletButton)\n\n  if (await importWalletButton.isDisabled()) {\n    const errorText = await page.locator(StepSelectors.error).textContent({\n      timeout: 1000\n    })\n\n    throw new Error(`[CreatePassword] Invalid password. Error from MetaMask: ${errorText}`)\n  }\n\n  await importWalletButton.click()\n}\n","import type { Page } from '@playwright/test'\nimport { importWallet } from './actions'\nimport Selectors from './selectors'\n\nexport class OnboardingPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async importWallet(seedPhrase: string, password: string) {\n    return await importWallet(this.page, seedPhrase, password)\n  }\n}\n","const container = 'section.error-page'\n\nexport default {\n  header: `${container} > .error-page__header`,\n  errors: `${container} > .error-page__details li`\n}\n","import Selectors from './selectors'\n\nexport class CrashPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n}\n","export const LoadingSelectors = {\n  spinner: '.spinner'\n}\n","import type { Page } from '@playwright/test'\nimport { LoadingSelectors } from '../selectors'\n\n// TODO: Should we decrease the timeout?\n// TODO: Not sure if hard coding the timeout is a good idea but must be enough for now.\nconst DEFAULT_TIMEOUT = 10_000\n\nexport async function waitForSpinnerToVanish(page: Page) {\n  await page.locator(LoadingSelectors.spinner).waitFor({\n    state: 'hidden',\n    timeout: DEFAULT_TIMEOUT\n  })\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  passwordInput: createDataTestSelector('unlock-password'),\n  submitButton: createDataTestSelector('unlock-submit')\n}\n","import type { Page } from '@playwright/test'\nimport { waitForSpinnerToVanish } from '../../../utils/waitForSpinnerToVanish'\nimport Selectors from '../selectors'\n\nexport async function unlock(page: Page, password: string) {\n  await page.locator(Selectors.passwordInput).fill(password)\n  await page.locator(Selectors.submitButton).click()\n\n  await waitForSpinnerToVanish(page)\n}\n","import type { Page } from '@playwright/test'\nimport { unlock } from './actions'\nimport Selectors from './selectors'\n\nexport class LockPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async unlock(password: string) {\n    await unlock(this.page, password)\n  }\n}\n","import type { Page } from '@playwright/test'\nimport {\n  addNetwork,\n  addNewAccount,\n  importWalletFromPrivateKey,\n  lock,\n  settings,\n  switchAccount,\n  switchNetwork,\n  toggleShowTestNetworks,\n  transactionDetails\n} from './actions'\nimport type { Network } from './actions'\nimport Selectors from './selectors'\nimport type { SettingsSidebarMenus } from './selectors/settings'\n\nexport class HomePage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async goBackToHomePage() {\n    await this.page.locator(Selectors.logo).click()\n  }\n\n  async lock() {\n    await lock(this.page)\n  }\n\n  async addNewAccount(accountName: string) {\n    await addNewAccount(this.page, accountName)\n  }\n\n  async importWalletFromPrivateKey(privateKey: string) {\n    await importWalletFromPrivateKey(this.page, privateKey)\n  }\n\n  async switchAccount(accountName: string) {\n    await switchAccount(this.page, accountName)\n  }\n\n  async openSettings() {\n    await settings.openSettings(this.page)\n  }\n\n  async openSidebarMenu(menu: SettingsSidebarMenus) {\n    await settings.openSidebarMenu(this.page, menu)\n  }\n\n  async toggleShowTestNetworks() {\n    await toggleShowTestNetworks(this.page)\n  }\n\n  async resetAccount() {\n    await settings.advanced.resetAccount(this.page)\n  }\n\n  async toggleDismissSecretRecoveryPhraseReminder() {\n    await settings.advanced.toggleDismissSecretRecoveryPhraseReminder(this.page)\n  }\n\n  async switchNetwork(networkName: string, isTestnet: boolean) {\n    await switchNetwork(this.page, networkName, isTestnet)\n  }\n\n  async addNetwork(network: Network) {\n    await addNetwork(this.page, network)\n  }\n\n  async openTransactionDetails(txIndex: number) {\n    await transactionDetails.open(this.page, txIndex)\n  }\n\n  async closeTransactionDetails() {\n    await transactionDetails.close(this.page)\n  }\n}\n","import type { BrowserContext, Page } from '@playwright/test'\n\nexport async function getNotificationPageAndWaitForLoad(context: BrowserContext, extensionId: string) {\n  const notificationPageUrl = `chrome-extension://${extensionId}/notification.html`\n\n  const isNotificationPage = (page: Page) => page.url().includes(notificationPageUrl)\n\n  // Check if notification page is already open.\n  let notificationPage = context.pages().find(isNotificationPage)\n\n  if (!notificationPage) {\n    notificationPage = await context.waitForEvent('page', { predicate: isNotificationPage })\n  }\n\n  // Set pop-up window viewport size to resemble the actual MetaMask pop-up window.\n  await notificationPage.setViewportSize({\n    width: 360,\n    height: 592\n  })\n\n  await notificationPage.waitForLoadState('load')\n\n  return notificationPage\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nexport default {\n  confirmActionButton: `.page-container__footer ${createDataTestSelector('page-container-footer-next')}`,\n  rejectActionButton: `.page-container__footer ${createDataTestSelector('page-container-footer-cancel')}`\n}\n","export default {\n  accountOption: '.choose-account-list .choose-account-list__list .choose-account-list__account',\n  accountCheckbox: 'input.choose-account-list__list-check-box'\n}\n","const addNetwork = {\n  approveButton: '.confirmation-footer__actions button.btn-primary',\n  cancelButton: '.confirmation-footer__actions button.btn-secondary'\n}\n\nconst switchNetwork = {\n  switchNetworkButton: '.confirmation-footer__actions button.btn-primary',\n  cancelButton: '.confirmation-footer__actions button.btn-secondary'\n}\n\nexport default {\n  addNetwork,\n  switchNetwork\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nconst approve = {\n  maxButton: createDataTestSelector('custom-spending-cap-max-button'),\n  customSpendingCapInput: createDataTestSelector('custom-spending-cap-input')\n}\n\nexport default {\n  approve\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nconst simpleMessage = {\n  signButton: `.request-signature__footer ${createDataTestSelector('request-signature__sign')}`,\n  rejectButton: '.request-signature__footer button.btn-secondary'\n}\n\nconst structuredMessage = {\n  scrollDownButton: `.signature-request-message ${createDataTestSelector('signature-request-scroll-button')}`,\n  signButton: `.signature-request-footer ${createDataTestSelector('signature-sign-button')}`,\n  rejectButton: `.signature-request-footer ${createDataTestSelector('signature-cancel-button')}`\n}\n\nexport default {\n  simpleMessage,\n  structuredMessage\n}\n","import { createDataTestSelector } from '../../../utils/selectors/createDataTestSelector'\n\nconst advancedGasFeeMenu = {\n  maxBaseFeeInput: createDataTestSelector('base-fee-input'),\n  priorityFeeInput: createDataTestSelector('priority-fee-input'),\n  gasLimitEditButton: createDataTestSelector('advanced-gas-fee-edit'),\n  gasLimitInput: createDataTestSelector('gas-limit-input'),\n  gasLimitError: `div:has(> ${createDataTestSelector('gas-limit-input')}) + .form-field__error`,\n  saveButton: '.popover-footer > button.btn-primary'\n}\n\nconst lowGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-low'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-low')} .edit-gas-item__fee-estimate`\n}\n\nconst marketGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-medium'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-medium')} .edit-gas-item__fee-estimate`\n}\n\nconst aggressiveGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-high'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-high')} .edit-gas-item__fee-estimate`\n}\n\nconst editGasFeeMenu = {\n  editGasFeeButton: createDataTestSelector('edit-gas-fee-icon'),\n  editGasFeeButtonToolTip: '.edit-gas-fee-button .info-tooltip',\n  lowGasFee,\n  marketGasFee,\n  aggressiveGasFee,\n  siteSuggestedGasFeeButton: createDataTestSelector('edit-gas-fee-item-dappSuggested'),\n  advancedGasFeeButton: createDataTestSelector('edit-gas-fee-item-custom'),\n  advancedGasFeeMenu\n}\n\nconst nftApproveAllConfirmationPopup = {\n  approveButton: '.set-approval-for-all-warning__content button.set-approval-for-all-warning__footer__approve-button'\n}\n\nexport default {\n  editGasFeeMenu,\n  nftApproveAllConfirmationPopup\n}\n","import ActionFooter from './actionFooter'\nimport ConnectPage from './connectPage'\nimport NetworkPage from './networkPage'\nimport PermissionPage from './permissionPage'\nimport SignaturePage from './signaturePage'\nimport TransactionPage from './transactionPage'\n\nexport default {\n  ActionFooter,\n  ConnectPage,\n  SignaturePage,\n  NetworkPage,\n  PermissionPage,\n  TransactionPage\n}\n","import type { Locator, Page } from '@playwright/test'\nimport { allTextContents } from '../../../utils/allTextContents'\nimport Selectors from '../selectors'\n\nasync function selectAccounts(accountsToSelect: string[], accountLocators: Locator[], availableAccountNames: string[]) {\n  for (const account of accountsToSelect) {\n    const accountNameIndex = availableAccountNames.findIndex((name) => name.startsWith(account))\n    if (accountNameIndex < 0) throw new Error(`[ConnectToDapp] Account with name ${account} not found`)\n    await accountLocators[accountNameIndex]?.locator(Selectors.ConnectPage.accountCheckbox).check()\n  }\n}\n\nasync function connectMultipleAccounts(notificationPage: Page, accounts: string[]) {\n  // Wait for the accounts to be loaded as 'all()' doesnt not wait for the results - https://playwright.dev/docs/api/class-locator#locator-all\n  // Additionally disable default account to reuse necessary delay\n  await notificationPage\n    .locator(Selectors.ConnectPage.accountOption)\n    .locator(Selectors.ConnectPage.accountCheckbox)\n    .last()\n    .setChecked(false)\n\n  const accountLocators = await notificationPage.locator(Selectors.ConnectPage.accountOption).all()\n  const accountNames = await allTextContents(accountLocators)\n\n  await selectAccounts(accounts, accountLocators, accountNames)\n}\n\nasync function confirmConnection(notificationPage: Page) {\n  // Click `Next`\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n  // Click `Connect`\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\n// By default, only the last account will be selected. If you want to select a specific account, pass `accounts` parameter.\nexport async function connectToDapp(notificationPage: Page, accounts?: string[]) {\n  if (accounts && accounts.length > 0) {\n    await connectMultipleAccounts(notificationPage, accounts)\n  }\n\n  await confirmConnection(notificationPage)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\n\nconst signMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\nconst rejectMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\n// Used for:\n// - `personal_sign`\n// - `eth_signTypedData`\nexport const signSimpleMessage = {\n  sign: signMessage,\n  reject: rejectMessage\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\n\nconst signMessage = async (notificationPage: Page) => {\n  const scrollDownButton = notificationPage.locator(Selectors.SignaturePage.structuredMessage.scrollDownButton)\n  const signButton = notificationPage.locator(Selectors.ActionFooter.confirmActionButton)\n\n  while (await signButton.isDisabled()) {\n    await scrollDownButton.click()\n  }\n\n  await signButton.click()\n}\n\nconst rejectMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\n// Used for:\n// - `eth_signTypedData_v3`\n// - `eth_signTypedData_v4`\nexport const signStructuredMessage = {\n  sign: signMessage,\n  reject: rejectMessage\n}\n","import type { Page } from '@playwright/test'\nimport { z } from 'zod'\nimport { waitFor } from '../../../utils/waitFor'\nimport HomePageSelectors from '../../HomePage/selectors'\nimport Selectors from '../selectors'\n\nconst GasSetting = z.union([\n  z.literal('low'),\n  z.literal('market'),\n  z.literal('aggressive'),\n  z.literal('site'),\n  z\n    .object({\n      maxBaseFee: z.number(),\n      priorityFee: z.number(),\n      // TODO: Add gasLimit range validation.\n      gasLimit: z.number().optional()\n    })\n    .superRefine(({ maxBaseFee, priorityFee }, ctx) => {\n      if (priorityFee > maxBaseFee) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Max base fee cannot be lower than priority fee',\n          path: ['MetaMask', 'confirmTransaction', 'gasSetting', 'maxBaseFee']\n        })\n      }\n    })\n])\n\nexport type GasSetting = z.input<typeof GasSetting>\n\nconst confirmTransaction = async (notificationPage: Page, options: GasSetting) => {\n  const gasSetting = GasSetting.parse(options)\n\n  const handleNftSetApprovalForAll = async (page: Page) => {\n    try {\n      const nftApproveButtonLocator = page.locator(\n        Selectors.TransactionPage.nftApproveAllConfirmationPopup.approveButton\n      )\n      const isNfTPopupHidden = await waitFor(() => nftApproveButtonLocator.isHidden(), 3_000, false)\n\n      if (!isNfTPopupHidden) {\n        await nftApproveButtonLocator.click()\n      }\n    } catch (e) {\n      if (page.isClosed()) {\n        return\n      }\n\n      throw new Error(`Failed to handle NFT setApprovalForAll popup: ${e}`)\n    }\n  }\n\n  // By default, the `site` gas setting is used.\n  if (gasSetting === 'site') {\n    await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n    await handleNftSetApprovalForAll(notificationPage)\n\n    return\n  }\n\n  // TODO: This button can be invisible in case of a network issue. Verify this, and handle in the future.\n  await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.editGasFeeButton).click()\n\n  const estimationNotAvailableErrorMessage = (gasSetting: string) =>\n    `[ConfirmTransaction] Estimated fee is not available for the \"${gasSetting}\" gas setting. By default, MetaMask would use the \"site\" gas setting in this case, however, this is not YOUR intention.`\n\n  const handleLowMediumOrAggressiveGasSetting = async (\n    gasSetting: string,\n    selectors: { button: string; maxFee: string }\n  ) => {\n    if ((await notificationPage.locator(selectors.maxFee).textContent()) === '--') {\n      throw new Error(estimationNotAvailableErrorMessage(gasSetting))\n    }\n\n    await notificationPage.locator(selectors.button).click()\n  }\n\n  if (gasSetting === 'low') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.lowGasFee)\n  } else if (gasSetting === 'market') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.marketGasFee)\n  } else if (gasSetting === 'aggressive') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.aggressiveGasFee)\n  } else {\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeButton).click()\n\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.maxBaseFeeInput).fill('')\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.maxBaseFeeInput)\n      .fill(gasSetting.maxBaseFee.toString())\n\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.priorityFeeInput)\n      .fill('')\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.priorityFeeInput)\n      .fill(gasSetting.priorityFee.toString())\n\n    if (gasSetting.gasLimit) {\n      await notificationPage\n        .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitEditButton)\n        .click()\n\n      await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitInput).fill('')\n      await notificationPage\n        .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitInput)\n        .fill(gasSetting.gasLimit.toString())\n\n      const gasLimitErrorLocator = notificationPage.locator(\n        Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitError\n      )\n      const isGasLimitErrorHidden = await waitFor(() => gasLimitErrorLocator.isHidden(), 1_000, false) // TODO: Extract & make configurable\n\n      if (!isGasLimitErrorHidden) {\n        const errorText = await gasLimitErrorLocator.textContent({\n          timeout: 1_000 // TODO: Extract & make configurable\n        })\n\n        throw new Error(`[ConfirmTransaction] Invalid gas limit: ${errorText}`)\n      }\n    }\n\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.saveButton).click()\n  }\n\n  // We wait until the tooltip is not visible anymore. This indicates a gas setting was changed.\n  // Ideally, we would wait until the edit button changes its text, i.e., \"Site\" -> \"Aggressive\", however, this is not possible right now.\n  // For some unknown reason, if the manual gas setting is too high (>1 ETH), the edit button displays \"Site\" instead of \"Advanced\" ¯\\_(ツ)_/¯\n  const waitForAction = async () => {\n    const isTooltipVisible = await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.editGasFeeButtonToolTip)\n      .isVisible()\n\n    return !isTooltipVisible\n  }\n\n  // TODO: Extract & make configurable\n  await waitFor(waitForAction, 3_000, true)\n\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n  await handleNftSetApprovalForAll(notificationPage)\n}\n\nconst confirmTransactionAndWaitForMining = async (walletPage: Page, notificationPage: Page, options: GasSetting) => {\n  await walletPage.locator(HomePageSelectors.activityTab.activityTabButton).click()\n\n  const waitForUnapprovedTxs = async () => {\n    const unapprovedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingUnapprovedTransactions).count()\n\n    return unapprovedTxs !== 0\n  }\n\n  // TODO: Extract timeout.\n  const newTxsFound = await waitFor(waitForUnapprovedTxs, 30_000, false)\n\n  if (!newTxsFound) {\n    throw new Error('No new pending transactions found in 30s')\n  }\n\n  await confirmTransaction(notificationPage, options)\n\n  const waitForMining = async () => {\n    const unapprovedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingUnapprovedTransactions).count()\n    const pendingTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingApprovedTransactions).count()\n    const queuedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingQueuedTransactions).count()\n\n    return unapprovedTxs === 0 && pendingTxs === 0 && queuedTxs === 0\n  }\n\n  // TODO: Extract timeout.\n  const allTxsMined = await waitFor(waitForMining, 120_000, false)\n\n  if (!allTxsMined) {\n    throw new Error('All pending and queued transactions were not mined in 120s')\n  }\n}\n\nconst rejectTransaction = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\nexport const transaction = {\n  confirm: confirmTransaction,\n  reject: rejectTransaction,\n  confirmAndWaitForMining: confirmTransactionAndWaitForMining\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\nimport { type GasSetting, transaction } from './transaction'\n\nconst editTokenPermission = async (notificationPage: Page, customSpendLimit: 'max' | number) => {\n  if (customSpendLimit === 'max') {\n    await notificationPage.locator(Selectors.PermissionPage.approve.maxButton).click()\n    return\n  }\n\n  await notificationPage\n    .locator(Selectors.PermissionPage.approve.customSpendingCapInput)\n    .fill(customSpendLimit.toString())\n}\n\nconst approveTokenPermission = async (notificationPage: Page, gasSetting: GasSetting) => {\n  // Click the \"Next\" button.\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n  // Approve flow is identical to the confirm transaction flow after we click the \"Next\" button.\n  await transaction.confirm(notificationPage, gasSetting)\n}\n\nconst rejectTokenPermission = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\nexport const approvePermission = {\n  editTokenPermission,\n  approve: approveTokenPermission,\n  reject: rejectTokenPermission\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../selectors'\n\nconst approveNewNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.addNetwork.approveButton).click()\n}\n\nconst rejectNewNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.addNetwork.cancelButton).click()\n}\n\nconst approveSwitchNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.switchNetwork.switchNetworkButton).click()\n}\n\nconst rejectSwitchNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.switchNetwork.cancelButton).click()\n}\n\nexport const network = {\n  approveNewNetwork,\n  rejectNewNetwork,\n  approveSwitchNetwork,\n  rejectSwitchNetwork\n}\n","import type { Page } from '@playwright/test'\nimport { getNotificationPageAndWaitForLoad } from '../../utils/getNotificationPageAndWaitForLoad'\nimport { waitFor } from '../../utils/waitFor'\nimport {\n  type GasSetting,\n  approvePermission,\n  connectToDapp,\n  network,\n  signSimpleMessage,\n  signStructuredMessage,\n  transaction\n} from './actions'\nimport Selectors from './selectors'\n\nexport class NotificationPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async connectToDapp(extensionId: string, accounts?: string[]) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await connectToDapp(notificationPage, accounts)\n  }\n\n  // TODO: Revisit this logic in the future to see if we can increase the performance by utilizing `Promise.race`.\n  private async beforeMessageSignature(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    // TODO: Make this configurable.\n    // Most of the time, this function will be used to sign structured messages, so we check for the scroll button first.\n    const isScrollButtonVisible = await waitFor(\n      () => notificationPage.locator(Selectors.SignaturePage.structuredMessage.scrollDownButton).isVisible(),\n      1_500,\n      false\n    )\n\n    return {\n      notificationPage,\n      isScrollButtonVisible\n    }\n  }\n\n  async signMessage(extensionId: string) {\n    const { notificationPage, isScrollButtonVisible } = await this.beforeMessageSignature(extensionId)\n\n    if (isScrollButtonVisible) {\n      await signStructuredMessage.sign(notificationPage)\n    } else {\n      await signSimpleMessage.sign(notificationPage)\n    }\n  }\n\n  async rejectMessage(extensionId: string) {\n    const { notificationPage, isScrollButtonVisible } = await this.beforeMessageSignature(extensionId)\n\n    if (isScrollButtonVisible) {\n      await signStructuredMessage.reject(notificationPage)\n    } else {\n      await signSimpleMessage.reject(notificationPage)\n    }\n  }\n\n  async approveNewNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.approveNewNetwork(notificationPage)\n  }\n\n  async rejectNewNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.rejectNewNetwork(notificationPage)\n  }\n\n  async approveSwitchNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.approveSwitchNetwork(notificationPage)\n  }\n\n  async rejectSwitchNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.rejectSwitchNetwork(notificationPage)\n  }\n\n  async confirmTransaction(extensionId: string, options?: { gasSetting?: GasSetting }) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.confirm(notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async rejectTransaction(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.reject(notificationPage)\n  }\n\n  async confirmTransactionAndWaitForMining(extensionId: string, options?: { gasSetting?: GasSetting }) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.confirmAndWaitForMining(this.page, notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async approveTokenPermission(\n    extensionId: string,\n    options?: { spendLimit?: 'max' | number; gasSetting?: GasSetting }\n  ) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    if (options?.spendLimit !== undefined) {\n      await approvePermission.editTokenPermission(notificationPage, options.spendLimit)\n    }\n\n    await approvePermission.approve(notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async rejectTokenPermission(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await approvePermission.reject(notificationPage)\n  }\n}\n","import type { BrowserContext, Page } from '@playwright/test'\nimport { CrashPage, HomePage, LockPage, NotificationPage, OnboardingPage } from './pages'\nimport type { Network } from './pages/HomePage/actions'\nimport { SettingsSidebarMenus } from './pages/HomePage/selectors/settings'\nimport type { GasSetting } from './pages/NotificationPage/actions'\n\nconst NO_EXTENSION_ID_ERROR = new Error('MetaMask extensionId is not set')\n\n/**\n * This class is the heart of Synpress's MetaMask API.\n */\nexport class MetaMask {\n  /**\n   * This property can be used to access selectors for a given page.\n   *\n   * @group Selectors\n   */\n  readonly crashPage: CrashPage\n  /**\n   * This property can be used to access selectors for a given page.\n   *\n   * @group Selectors\n   */\n  readonly onboardingPage: OnboardingPage\n  /**\n   * This property can be used to access selectors for a given page.\n   *\n   * @group Selectors\n   */\n  readonly lockPage: LockPage\n  /**\n   * This property can be used to access selectors for a given page.\n   *\n   * @group Selectors\n   */\n  readonly homePage: HomePage\n  /**\n   * This property can be used to access selectors for a given page.\n   *\n   * @group Selectors\n   */\n  readonly notificationPage: NotificationPage\n\n  /**\n   * Class constructor.\n   *\n   * @param context - The browser context.\n   * @param page - The MetaMask tab page.\n   * @param password - The password of the MetaMask wallet.\n   * @param extensionId - The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.\n   *\n   * @returns A new instance of the MetaMask class.\n   */\n  constructor(\n    /**\n     * The browser context.\n     */\n    readonly context: BrowserContext,\n    /**\n     * The MetaMask tab page.\n     */\n    readonly page: Page,\n    /**\n     * The password of the MetaMask wallet.\n     */\n    readonly password: string,\n    /**\n     * The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.\n     */\n    readonly extensionId?: string\n  ) {\n    this.crashPage = new CrashPage()\n\n    this.onboardingPage = new OnboardingPage(page)\n    this.lockPage = new LockPage(page)\n    this.homePage = new HomePage(page)\n    this.notificationPage = new NotificationPage(page)\n  }\n\n  /**\n   * Imports a wallet using the given seed phrase.\n   *\n   * @param seedPhrase - The seed phrase to import.\n   */\n  async importWallet(seedPhrase: string) {\n    await this.onboardingPage.importWallet(seedPhrase, this.password)\n  }\n\n  /**\n   * Adds a new account with the given name. This account is based on the initially imported seed phrase.\n   *\n   * @param accountName - The name of the new account.\n   */\n  async addNewAccount(accountName: string) {\n    await this.homePage.addNewAccount(accountName)\n  }\n\n  /**\n   * Imports a wallet using the given private key.\n   *\n   * @param privateKey - The private key to import.\n   */\n  async importWalletFromPrivateKey(privateKey: string) {\n    await this.homePage.importWalletFromPrivateKey(privateKey)\n  }\n\n  /**\n   * Switches to the account with the given name.\n   *\n   * @param accountName - The name of the account to switch to.\n   */\n  async switchAccount(accountName: string) {\n    await this.homePage.switchAccount(accountName)\n  }\n\n  /**\n   * Adds a new network.\n   *\n   * @param network - The network object to use for adding the new network.\n   * @param network.name - The name of the network.\n   * @param network.rpcUrl - The RPC URL of the network.\n   * @param network.chainId - The chain ID of the network.\n   * @param network.symbol - The currency symbol of the network.\n   * @param network.blockExplorerUrl - The block explorer URL of the network.\n   */\n  async addNetwork(network: Network) {\n    await this.homePage.addNetwork(network)\n  }\n\n  /**\n   * Switches to the network with the given name.\n   *\n   * @param networkName - The name of the network to switch to.\n   * @param isTestnet - If switch to a test network.\n   */\n  async switchNetwork(networkName: string, isTestnet = false) {\n    await this.homePage.switchNetwork(networkName, isTestnet)\n  }\n\n  /**\n   * Connects to the dapp using the currently selected account.\n   */\n  async connectToDapp(accounts?: string[]) {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.connectToDapp(this.extensionId, accounts)\n  }\n\n  /**\n   * Locks MetaMask.\n   */\n  async lock() {\n    await this.homePage.lock()\n  }\n\n  /**\n   * Unlocks MetaMask.\n   */\n  async unlock() {\n    await this.lockPage.unlock(this.password)\n  }\n\n  /**\n   * Confirms a signature request. This function supports all types of commonly used signatures.\n   */\n  async confirmSignature() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.signMessage(this.extensionId)\n  }\n\n  /**\n   * Rejects a signature request. This function supports all types of commonly used signatures.\n   */\n  async rejectSignature() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectMessage(this.extensionId)\n  }\n\n  /**\n   * Approves a new network request.\n   */\n  async approveNewNetwork() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveNewNetwork(this.extensionId)\n  }\n\n  /**\n   * Rejects a new network request.\n   */\n  async rejectNewNetwork() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectNewNetwork(this.extensionId)\n  }\n\n  /**\n   * Approves a switch network request.\n   */\n  async approveSwitchNetwork() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveSwitchNetwork(this.extensionId)\n  }\n\n  /**\n   * Rejects a switch network request.\n   */\n  async rejectSwitchNetwork() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectSwitchNetwork(this.extensionId)\n  }\n\n  /**\n   * Confirms a transaction request.\n   *\n   * @param options - The transaction options.\n   * @param options.gasSetting - The gas setting to use for the transaction.\n   */\n  async confirmTransaction(options?: { gasSetting?: GasSetting }) {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.confirmTransaction(this.extensionId, options)\n  }\n\n  /**\n   * Rejects a transaction request.\n   */\n  async rejectTransaction() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectTransaction(this.extensionId)\n  }\n\n  /**\n   * Approves a permission request to spend tokens.\n   *\n   * ::: warning\n   * For NFT approvals, use `confirmTransaction` method.\n   * :::\n   *\n   * @param options - The permission options.\n   * @param options.spendLimit - The spend limit to use for the permission.\n   * @param options.gasSetting - The gas setting to use for the approval transaction.\n   */\n  async approveTokenPermission(options?: {\n    spendLimit?: 'max' | number\n    gasSetting?: GasSetting\n  }) {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveTokenPermission(this.extensionId, options)\n  }\n\n  /**\n   * Rejects a permission request to spend tokens.\n   *\n   * ::: warning\n   * For NFT approvals, use `confirmTransaction` method.\n   * :::\n   */\n  async rejectTokenPermission() {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectTokenPermission(this.extensionId)\n  }\n\n  /**\n   * Goes back to the home page of MetaMask tab.\n   */\n  async goBackToHomePage() {\n    await this.homePage.goBackToHomePage()\n  }\n\n  /**\n   * Opens the settings page.\n   */\n  async openSettings() {\n    await this.homePage.openSettings()\n  }\n\n  /**\n   * Opens a given menu in the sidebar.\n   *\n   * @param menu - The menu to open.\n   */\n  async openSidebarMenu(menu: SettingsSidebarMenus) {\n    await this.homePage.openSidebarMenu(menu)\n  }\n\n  /**\n   * Toggles the \"Show Test Networks\" setting.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  async toggleShowTestNetworks() {\n    await this.homePage.toggleShowTestNetworks()\n  }\n\n  /**\n   * Toggles the \"Dismiss Secret Recovery Phrase Reminder\" setting.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  async toggleDismissSecretRecoveryPhraseReminder() {\n    await this.homePage.toggleDismissSecretRecoveryPhraseReminder()\n  }\n\n  /**\n   * Resets the account.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  async resetAccount() {\n    await this.homePage.resetAccount()\n  }\n\n  /// -------------------------------------------\n  /// ---------- EXPERIMENTAL FEATURES ----------\n  /// -------------------------------------------\n\n  /**\n   * Confirms a transaction request and waits for the transaction to be mined.\n   * This function utilizes the \"Activity\" tab of the MetaMask tab.\n   *\n   * @param options - The transaction options.\n   * @param options.gasSetting - The gas setting to use for the transaction.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  async confirmTransactionAndWaitForMining(options?: {\n    gasSetting?: GasSetting\n  }) {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.confirmTransactionAndWaitForMining(this.extensionId, options)\n  }\n\n  /**\n   * Opens the transaction details.\n   *\n   * @param txIndex - The index of the transaction in the \"Activity\" tab. Starts from `0`.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  async openTransactionDetails(txIndex: number) {\n    await this.homePage.openTransactionDetails(txIndex)\n  }\n\n  /**\n   * Closes the currently opened transaction details.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  async closeTransactionDetails() {\n    await this.homePage.closeTransactionDetails()\n  }\n}\n","import type { Page } from '@playwright/test'\nimport { errors as playwrightErrors } from '@playwright/test'\nimport { MetaMask } from '../metamask'\nimport { CrashPage, HomePage } from '../pages'\nimport { closePopover, closeRecoveryPhraseReminder } from '../pages/HomePage/actions'\nimport { waitForSpinnerToVanish } from '../utils/waitForSpinnerToVanish'\n\n/**\n *  A more advanced version of the `MetaMask.unlock()` function that incorporates various workarounds for MetaMask issues, among other things.\n *  This function should be used instead of the `MetaMask.unlock()` when passing it to the `testWithSynpress` function.\n *\n * @param page - The MetaMask tab page.\n * @param password - The password of the MetaMask wallet.\n */\nexport async function unlockForFixture(page: Page, password: string) {\n  const metamask = new MetaMask(page.context(), page, password)\n\n  await unlockWalletButReloadIfSpinnerDoesNotVanish(metamask)\n\n  await retryIfMetaMaskCrashAfterUnlock(page)\n\n  await closePopover(page)\n  await closeRecoveryPhraseReminder(page)\n}\n\nasync function unlockWalletButReloadIfSpinnerDoesNotVanish(metamask: MetaMask) {\n  try {\n    await metamask.unlock()\n  } catch (e) {\n    if (e instanceof playwrightErrors.TimeoutError) {\n      console.warn('[UnlockWalletButReloadIfSpinnerDoesNotVanish] Unlocking MetaMask timed out. Reloading page...')\n\n      const page = metamask.page\n\n      await page.reload()\n      await waitForSpinnerToVanish(page)\n    } else {\n      throw e\n    }\n  }\n}\n\nasync function retryIfMetaMaskCrashAfterUnlock(page: Page) {\n  const homePageLogoLocator = page.locator(HomePage.selectors.logo)\n\n  const isHomePageLogoVisible = await homePageLogoLocator.isVisible()\n  const isPopoverVisible = await page.locator(HomePage.selectors.popover.closeButton).isVisible()\n\n  if (!isHomePageLogoVisible && !isPopoverVisible) {\n    if (await page.locator(CrashPage.selectors.header).isVisible()) {\n      const errors = await page.locator(CrashPage.selectors.errors).allTextContents()\n\n      console.warn(['[RetryIfMetaMaskCrashAfterUnlock] MetaMask crashed due to:', ...errors].join('\\n'))\n\n      console.log('[RetryIfMetaMaskCrashAfterUnlock] Reloading page...')\n      await page.reload()\n\n      try {\n        await homePageLogoLocator.waitFor({\n          state: 'visible',\n          timeout: 10_000 // TODO: Extract & Make this timeout configurable.\n        })\n        console.log('[RetryIfMetaMaskCrashAfterUnlock] Successfully restored MetaMask!')\n      } catch (e) {\n        if (e instanceof playwrightErrors.TimeoutError) {\n          throw new Error(\n            ['[RetryIfMetaMaskCrashAfterUnlock] Reload did not help. Throwing with the crash cause:', ...errors].join(\n              '\\n'\n            )\n          )\n        }\n\n        throw e\n      }\n    }\n  }\n}\n"]}