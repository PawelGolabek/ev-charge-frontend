import type { Page } from '@playwright/test';
import { z } from 'zod';
declare const GasSetting: z.ZodUnion<[z.ZodLiteral<"low">, z.ZodLiteral<"market">, z.ZodLiteral<"aggressive">, z.ZodLiteral<"site">, z.ZodEffects<z.ZodObject<{
    maxBaseFee: z.ZodNumber;
    priorityFee: z.ZodNumber;
    gasLimit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    maxBaseFee: number;
    priorityFee: number;
    gasLimit?: number | undefined;
}, {
    maxBaseFee: number;
    priorityFee: number;
    gasLimit?: number | undefined;
}>, {
    maxBaseFee: number;
    priorityFee: number;
    gasLimit?: number | undefined;
}, {
    maxBaseFee: number;
    priorityFee: number;
    gasLimit?: number | undefined;
}>]>;
export type GasSetting = z.input<typeof GasSetting>;
export declare const transaction: {
    confirm: (notificationPage: Page, options: GasSetting) => Promise<void>;
    reject: (notificationPage: Page) => Promise<void>;
    confirmAndWaitForMining: (walletPage: Page, notificationPage: Page, options: GasSetting) => Promise<void>;
};
export {};
//# sourceMappingURL=transaction.d.ts.map