import type { Page } from '@playwright/test';
import type { Network } from './actions';
import type { SettingsSidebarMenus } from './selectors/settings';
export declare class HomePage {
    static readonly selectors: {
        logo: string;
        copyAccountAddressButton: string;
        currentNetwork: string;
        threeDotsMenu: {
            threeDotsButton: string;
            settingsButton: string;
            lockButton: string;
        };
        settings: {
            SettingsSidebarMenus: typeof SettingsSidebarMenus;
            sidebarMenu: (menu: SettingsSidebarMenus) => string;
            advanced: {
                resetAccount: {
                    button: string;
                    confirmButton: string;
                };
                showTestNetworksToggle: string;
                dismissSecretRecoveryPhraseReminderToggle: string;
            };
            networks: {
                addNetworkManuallyButton: string;
                newNetworkForm: {
                    networkNameInput: string;
                    rpcUrlInput: string;
                    rpcUrlError: string;
                    chainIdInput: string;
                    chainIdError: string;
                    symbolInput: string;
                    symbolError: string;
                    blockExplorerUrlInput: string;
                    saveButton: string;
                };
            };
        };
        activityTab: {
            activityTabButton: string;
            transactionsList: string;
            pendingQueuedTransactions: string;
            pendingUnapprovedTransactions: string;
            pendingApprovedTransactions: string;
            completedTransactions: string;
        };
        networkDropdown: {
            dropdownButton: string;
            closeDropdownButton: string;
            networksList: string;
            networks: string;
            showTestNetworksToggle: string;
            addNetworkButton: string;
            toggleOff: string;
            toggleOn: string;
        };
        accountMenu: {
            accountButton: string;
            accountNames: string;
            addAccountMenu: {
                addAccountButton: string;
                addNewAccountButton: string;
                importAccountButton: string;
                addNewAccountMenu: {
                    accountNameInput: string;
                    createButton: string;
                };
                importAccountMenu: {
                    privateKeyInput: string;
                    importButton: string;
                    error: string;
                };
            };
        };
        recoveryPhraseReminder: {
            gotItButton: string;
        };
        popover: {
            closeButton: string;
        };
        networkAddedPopover: {
            switchToNetworkButton: string;
            dismissButton: string;
        };
        newNetworkInfoPopover: {
            gotItButton: string;
        };
    };
    readonly selectors: {
        logo: string;
        copyAccountAddressButton: string;
        currentNetwork: string;
        threeDotsMenu: {
            threeDotsButton: string;
            settingsButton: string;
            lockButton: string;
        };
        settings: {
            SettingsSidebarMenus: typeof SettingsSidebarMenus;
            sidebarMenu: (menu: SettingsSidebarMenus) => string;
            advanced: {
                resetAccount: {
                    button: string;
                    confirmButton: string;
                };
                showTestNetworksToggle: string;
                dismissSecretRecoveryPhraseReminderToggle: string;
            };
            networks: {
                addNetworkManuallyButton: string;
                newNetworkForm: {
                    networkNameInput: string;
                    rpcUrlInput: string;
                    rpcUrlError: string;
                    chainIdInput: string;
                    chainIdError: string;
                    symbolInput: string;
                    symbolError: string;
                    blockExplorerUrlInput: string;
                    saveButton: string;
                };
            };
        };
        activityTab: {
            activityTabButton: string;
            transactionsList: string;
            pendingQueuedTransactions: string;
            pendingUnapprovedTransactions: string;
            pendingApprovedTransactions: string;
            completedTransactions: string;
        };
        networkDropdown: {
            dropdownButton: string;
            closeDropdownButton: string;
            networksList: string;
            networks: string;
            showTestNetworksToggle: string;
            addNetworkButton: string;
            toggleOff: string;
            toggleOn: string;
        };
        accountMenu: {
            accountButton: string;
            accountNames: string;
            addAccountMenu: {
                addAccountButton: string;
                addNewAccountButton: string;
                importAccountButton: string;
                addNewAccountMenu: {
                    accountNameInput: string;
                    createButton: string;
                };
                importAccountMenu: {
                    privateKeyInput: string;
                    importButton: string;
                    error: string;
                };
            };
        };
        recoveryPhraseReminder: {
            gotItButton: string;
        };
        popover: {
            closeButton: string;
        };
        networkAddedPopover: {
            switchToNetworkButton: string;
            dismissButton: string;
        };
        newNetworkInfoPopover: {
            gotItButton: string;
        };
    };
    readonly page: Page;
    constructor(page: Page);
    goBackToHomePage(): Promise<void>;
    lock(): Promise<void>;
    addNewAccount(accountName: string): Promise<void>;
    importWalletFromPrivateKey(privateKey: string): Promise<void>;
    switchAccount(accountName: string): Promise<void>;
    openSettings(): Promise<void>;
    openSidebarMenu(menu: SettingsSidebarMenus): Promise<void>;
    toggleShowTestNetworks(): Promise<void>;
    resetAccount(): Promise<void>;
    toggleDismissSecretRecoveryPhraseReminder(): Promise<void>;
    switchNetwork(networkName: string, isTestnet: boolean): Promise<void>;
    addNetwork(network: Network): Promise<void>;
    openTransactionDetails(txIndex: number): Promise<void>;
    closeTransactionDetails(): Promise<void>;
}
//# sourceMappingURL=page.d.ts.map