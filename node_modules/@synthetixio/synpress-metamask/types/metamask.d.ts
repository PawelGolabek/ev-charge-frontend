import type { BrowserContext, Page } from '@playwright/test';
import { CrashPage, HomePage, LockPage, NotificationPage, OnboardingPage } from './pages';
import type { Network } from './pages/HomePage/actions';
import { SettingsSidebarMenus } from './pages/HomePage/selectors/settings';
import type { GasSetting } from './pages/NotificationPage/actions';
/**
 * This class is the heart of Synpress's MetaMask API.
 */
export declare class MetaMask {
    /**
     * The browser context.
     */
    readonly context: BrowserContext;
    /**
     * The MetaMask tab page.
     */
    readonly page: Page;
    /**
     * The password of the MetaMask wallet.
     */
    readonly password: string;
    /**
     * The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.
     */
    readonly extensionId?: string | undefined;
    /**
     * This property can be used to access selectors for a given page.
     *
     * @group Selectors
     */
    readonly crashPage: CrashPage;
    /**
     * This property can be used to access selectors for a given page.
     *
     * @group Selectors
     */
    readonly onboardingPage: OnboardingPage;
    /**
     * This property can be used to access selectors for a given page.
     *
     * @group Selectors
     */
    readonly lockPage: LockPage;
    /**
     * This property can be used to access selectors for a given page.
     *
     * @group Selectors
     */
    readonly homePage: HomePage;
    /**
     * This property can be used to access selectors for a given page.
     *
     * @group Selectors
     */
    readonly notificationPage: NotificationPage;
    /**
     * Class constructor.
     *
     * @param context - The browser context.
     * @param page - The MetaMask tab page.
     * @param password - The password of the MetaMask wallet.
     * @param extensionId - The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.
     *
     * @returns A new instance of the MetaMask class.
     */
    constructor(
    /**
     * The browser context.
     */
    context: BrowserContext, 
    /**
     * The MetaMask tab page.
     */
    page: Page, 
    /**
     * The password of the MetaMask wallet.
     */
    password: string, 
    /**
     * The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.
     */
    extensionId?: string | undefined);
    /**
     * Imports a wallet using the given seed phrase.
     *
     * @param seedPhrase - The seed phrase to import.
     */
    importWallet(seedPhrase: string): Promise<void>;
    /**
     * Adds a new account with the given name. This account is based on the initially imported seed phrase.
     *
     * @param accountName - The name of the new account.
     */
    addNewAccount(accountName: string): Promise<void>;
    /**
     * Imports a wallet using the given private key.
     *
     * @param privateKey - The private key to import.
     */
    importWalletFromPrivateKey(privateKey: string): Promise<void>;
    /**
     * Switches to the account with the given name.
     *
     * @param accountName - The name of the account to switch to.
     */
    switchAccount(accountName: string): Promise<void>;
    /**
     * Adds a new network.
     *
     * @param network - The network object to use for adding the new network.
     * @param network.name - The name of the network.
     * @param network.rpcUrl - The RPC URL of the network.
     * @param network.chainId - The chain ID of the network.
     * @param network.symbol - The currency symbol of the network.
     * @param network.blockExplorerUrl - The block explorer URL of the network.
     */
    addNetwork(network: Network): Promise<void>;
    /**
     * Switches to the network with the given name.
     *
     * @param networkName - The name of the network to switch to.
     * @param isTestnet - If switch to a test network.
     */
    switchNetwork(networkName: string, isTestnet?: boolean): Promise<void>;
    /**
     * Connects to the dapp using the currently selected account.
     */
    connectToDapp(accounts?: string[]): Promise<void>;
    /**
     * Locks MetaMask.
     */
    lock(): Promise<void>;
    /**
     * Unlocks MetaMask.
     */
    unlock(): Promise<void>;
    /**
     * Confirms a signature request. This function supports all types of commonly used signatures.
     */
    confirmSignature(): Promise<void>;
    /**
     * Rejects a signature request. This function supports all types of commonly used signatures.
     */
    rejectSignature(): Promise<void>;
    /**
     * Approves a new network request.
     */
    approveNewNetwork(): Promise<void>;
    /**
     * Rejects a new network request.
     */
    rejectNewNetwork(): Promise<void>;
    /**
     * Approves a switch network request.
     */
    approveSwitchNetwork(): Promise<void>;
    /**
     * Rejects a switch network request.
     */
    rejectSwitchNetwork(): Promise<void>;
    /**
     * Confirms a transaction request.
     *
     * @param options - The transaction options.
     * @param options.gasSetting - The gas setting to use for the transaction.
     */
    confirmTransaction(options?: {
        gasSetting?: GasSetting;
    }): Promise<void>;
    /**
     * Rejects a transaction request.
     */
    rejectTransaction(): Promise<void>;
    /**
     * Approves a permission request to spend tokens.
     *
     * ::: warning
     * For NFT approvals, use `confirmTransaction` method.
     * :::
     *
     * @param options - The permission options.
     * @param options.spendLimit - The spend limit to use for the permission.
     * @param options.gasSetting - The gas setting to use for the approval transaction.
     */
    approveTokenPermission(options?: {
        spendLimit?: 'max' | number;
        gasSetting?: GasSetting;
    }): Promise<void>;
    /**
     * Rejects a permission request to spend tokens.
     *
     * ::: warning
     * For NFT approvals, use `confirmTransaction` method.
     * :::
     */
    rejectTokenPermission(): Promise<void>;
    /**
     * Goes back to the home page of MetaMask tab.
     */
    goBackToHomePage(): Promise<void>;
    /**
     * Opens the settings page.
     */
    openSettings(): Promise<void>;
    /**
     * Opens a given menu in the sidebar.
     *
     * @param menu - The menu to open.
     */
    openSidebarMenu(menu: SettingsSidebarMenus): Promise<void>;
    /**
     * Toggles the "Show Test Networks" setting.
     *
     * ::: warning
     * This function requires the correct menu to be already opened.
     * :::
     */
    toggleShowTestNetworks(): Promise<void>;
    /**
     * Toggles the "Dismiss Secret Recovery Phrase Reminder" setting.
     *
     * ::: warning
     * This function requires the correct menu to be already opened.
     * :::
     */
    toggleDismissSecretRecoveryPhraseReminder(): Promise<void>;
    /**
     * Resets the account.
     *
     * ::: warning
     * This function requires the correct menu to be already opened.
     * :::
     */
    resetAccount(): Promise<void>;
    /**
     * Confirms a transaction request and waits for the transaction to be mined.
     * This function utilizes the "Activity" tab of the MetaMask tab.
     *
     * @param options - The transaction options.
     * @param options.gasSetting - The gas setting to use for the transaction.
     *
     * @experimental
     * @group Experimental Methods
     */
    confirmTransactionAndWaitForMining(options?: {
        gasSetting?: GasSetting;
    }): Promise<void>;
    /**
     * Opens the transaction details.
     *
     * @param txIndex - The index of the transaction in the "Activity" tab. Starts from `0`.
     *
     * @experimental
     * @group Experimental Methods
     */
    openTransactionDetails(txIndex: number): Promise<void>;
    /**
     * Closes the currently opened transaction details.
     *
     * @experimental
     * @group Experimental Methods
     */
    closeTransactionDetails(): Promise<void>;
}
//# sourceMappingURL=metamask.d.ts.map